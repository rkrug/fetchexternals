[{"path":"https://rkrug.github.io/fetchexternals/articles/manifest.html","id":"the-externals-manifest","dir":"Articles","previous_headings":"","what":"The externals manifest","title":"Using and Validating the Manifest","text":"externals manifest (externals.json) JSON file tells package fetch external Quarto files (assets) GitHub repositories. complete template bundled package can accessed via: See ?manifest_template full specification fields, allowed values, defaults.","code":"library(fetchexternals)  # return the template as a list tpl <- manifest_template(NULL)  # or write a copy into the project root manifest_template(\"externals.json\")"},{"path":"https://rkrug.github.io/fetchexternals/articles/manifest.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Using and Validating the Manifest","text":"typical workflow : Create copy manifest Use manifest_template() generate externals.json project. Edit manifest Fill repositories (repo), references (ref), files (path, dest), handle source URL (source_url = \"frontmatter\" | \"file\" | \"none\"). Validate manifest Run manifest_validate() check manifest well-formed. ensures required fields present, values valid, missing environment variables (api_env) reported. prefer collect problems instead stopping error: Fetch externals validated, use fetch_externals() download referenced files integrate site workflow.","code":"manifest_validate(\"externals.json\") issues <- manifest_validate(\"externals.json\", error_on_false = FALSE) if (length(issues)) {   writeLines(issues) }"},{"path":"https://rkrug.github.io/fetchexternals/articles/manifest.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Using and Validating the Manifest","text":"minimal example manifest (JSON):","code":"{   \"repos\": [     {       \"name\": \"ProjectA\",       \"repo\": \"example-org/project-a\",       \"ref\": \"v1.2.3\",       \"api_env\": \"PROJECTA_TOKEN\",       \"files\": [         {           \"path\": \"docs/page.qmd\",           \"dest\": \"external/ProjectA/page.qmd\",           \"source_url\": \"frontmatter\"         }       ]     }   ],   \"defaults\": {     \"fallback_to_default_branch\": true,     \"include_prereleases\": false   } }"},{"path":"https://rkrug.github.io/fetchexternals/articles/manifest.html","id":"key-functions","dir":"Articles","previous_headings":"","what":"Key functions","title":"Using and Validating the Manifest","text":"manifest_template(): Get copy template manifest (canonical schema documentation). manifest_validate(): Validate manifest detect errors warnings. fetch_externals(): Fetch integrate external files.","code":""},{"path":"https://rkrug.github.io/fetchexternals/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Name. Author, maintainer.","code":""},{"path":"https://rkrug.github.io/fetchexternals/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Name Y (2025). fetchexternals: Fetch External Quarto Files GitHub Repositories. R package version 0.1.0, https://github.com/rkrug/fetchexternals.","code":"@Manual{,   title = {fetchexternals: Fetch External Quarto Files from GitHub Repositories},   author = {Your Name},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/rkrug/fetchexternals}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"fetchexternals","dir":"","previous_headings":"","what":"fetchexternals","title":"Fetch External Quarto Files from GitHub Repositories","text":"Fetch external files GitHub repositories local project.","code":""},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fetch External Quarto Files from GitHub Repositories","text":"fetchexternals package provides helper function fetch_externals() pulls Quarto (.qmd) files multiple GitHub repositories site. function: Reads JSON manifest (externals.json) describing repositories files. Resolves ref use (latest release default, prerelease default-branch fallback options). Downloads requested files via GitHub Contents API. Caches downloads using HTTP ETags skip unchanged files. Injects source_url: page’s YAML front matter website can render “View source” button pointing authoritative repository. allows maintain pages separate repositories, release independently, automatically integrate single unified Quarto site.","code":""},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fetch External Quarto Files from GitHub Repositories","text":"can install development version GitHub: figure yorself - proof concept moment!","code":""},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fetch External Quarto Files from GitHub Repositories","text":"Create manifest file externals.json project root directory modify needed need adapt file based situation. run R: subsequent runs, unchanged files skipped thanks ETag caching.","code":"library(fetchexternals)  manifest_template(\"externals.json) validate_manifest(\"externals.json\", stop_on_error = TRUE) # validate the created manifest file validate_manifest(\"externals.json\", stop_on_error = TRUE)  # Fetch into external/ and update front matter fetch_externals(\"externals.json\")"},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Fetch External Quarto Files from GitHub Repositories","text":"repo entry may optionally specify \"api_env\" field, giving name environment variable holding GitHub token. \"api_env\" omitted, function falls back GITHUB_TOKEN SITE_A_TOKEN. Providing token raises rate limits (5000 requests/hour) enables access private repositories. Without token, public repos can fetched limited ~60 requests/hour.","code":""},{"path":"https://rkrug.github.io/fetchexternals/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fetch External Quarto Files from GitHub Repositories","text":"MIT © Rainer M Krug","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch external files from GitHub repositories — fetch_externals","title":"Fetch external files from GitHub repositories — fetch_externals","text":"Downloads text files (e.g., .qmd) external GitHub repositories current project based JSON manifest. Handles authentication, caching via ETag sidecars, optional recording canonical source URL.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch external files from GitHub repositories — fetch_externals","text":"","code":"fetch_externals(manifest = \"externals.json\", quiet = FALSE)"},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch external files from GitHub repositories — fetch_externals","text":"manifest Path JSON manifest file describing repositories files. quiet Logical; TRUE, suppresses progress messages. Default FALSE.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch external files from GitHub repositories — fetch_externals","text":"Invisibly, number files fetched updated.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"manifest-format","dir":"Reference","previous_headings":"","what":"Manifest format","title":"Fetch external files from GitHub repositories — fetch_externals","text":"manifest JSON object top-level key \"repos\", entry containing: repo (string): Repository \"owner/name\" format. ref  (string): Git reference (tag, branch, SHA). use \"latest\" workflow, resolve calling function, ensure implementation resolves \"latest\" concrete tag. api_env (string, optional): Name environment variable holds GitHub API token use repository. files (array): List file objects : path (string): Path inside repository fetch. dest (string): Destination path current project. source_url (string): One \"frontmatter\", \"file\", \"none\", controlling canonical source URL recorded: \"frontmatter\" — Insert update source_url: key file well-formed YAML front matter block (opening --- matching closing ---). valid front matter present, file left unchanged. \"file\" — Write canonical source URL sidecar file named <dest>.source. \"none\" — record source URL.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Fetch external files from GitHub repositories — fetch_externals","text":"repository, environment variable named api_env set, API calls authenticated via Authorization: Bearer header. api_env provided empty, use package’s default token discovery (e.g., GITHUB_TOKEN). Authentication increases rate limits allows access private repositories.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"etag-caching","dir":"Reference","previous_headings":"","what":"ETag caching","title":"Fetch external files from GitHub repositories — fetch_externals","text":"fetched file writes .etag sidecar next dest. subsequent runs, request includes -None-Match file re-downloaded changed.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/fetch_externals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch external files from GitHub repositories — fetch_externals","text":"","code":"if (FALSE) { # \\dontrun{ # Fetch according to a manifest file fetch_externals(\"externals.json\") } # }"},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or write the bundled externals.json template — manifest_template","title":"Access or write the bundled externals.json template — manifest_template","text":"Returns writes package's template manifest located inst/extdata/externals.json. dest NULL, template JSON read returned R list (files written). dest file path, template copied (creating parent directories needed). Use overwrite = TRUE replace existing file. dest missing, error raised.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or write the bundled externals.json template — manifest_template","text":"","code":"manifest_template(dest, overwrite = FALSE)"},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or write the bundled externals.json template — manifest_template","text":"dest NULL character scalar file path. NULL: return parsed template list. character path (e.g., \"externals.json\"): write template path. overwrite Logical. Overwrite dest already exists? Default FALSE.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access or write the bundled externals.json template — manifest_template","text":"dest NULL: template manifest list. Otherwise (writing): invisibly, normalized destination path (character).","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"manifest-structure","dir":"Reference","previous_headings":"","what":"Manifest structure","title":"Access or write the bundled externals.json template — manifest_template","text":"manifest JSON object two top-level keys: \"repos\" (array objects): required. entry configures one source repository. \"defaults\" (object): optional. Provides default behavior repos unless overridden per-repo.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"repositories-repos-","dir":"Reference","previous_headings":"","what":"Repositories (repos[])","title":"Access or write the bundled externals.json template — manifest_template","text":"repository entry supports following fields: name (string, optional): Human-readable identifier used organization. repo (string, required): GitHub repository \"owner/name\" form, e.g., \"example-org/project-\". ref (string, optional; default: \"latest\"): Git reference fetch . Allowed values: tag (e.g., \"v1.2.3\"), branch name (e.g., \"main\"), commit SHA, string \"latest\" meaning “use latest non-draft, non-prerelease GitHub release tag”. release exists fallback enabled (see defaults), repository’s default branch used. api_env (string, optional): Name environment variable holds GitHub API token use repository (e.g., \"PROJECTA_TOKEN\"). omitted empty, package’s token discovery (e.g., GITHUB_TOKEN) used. include_prereleases (logical, optional): TRUE ref = \"latest\", allow prereleases selected “latest”. Default inherited defaults, otherwise FALSE. fallback_to_default_branch (logical, optional): TRUE release found, fall back repo’s default branch ref = \"latest\". Default inherited defaults, otherwise TRUE. files (array objects, required): files fetch repo. item: path (string, required): Path inside repo (e.g., \"docs/page.qmd\"). dest (string, required): Destination path project (e.g., \"external/ProjectA/page.qmd\"). Parent directories created. source_url (string, required): record canonical source URL file. Allowed values (exact strings): \"frontmatter\" — Insert update source_url: key file well-formed YAML front matter block (opening --- matching closing ---). valid front matter present, file left unchanged. \"file\" — Write canonical URL sidecar file named <dest>.source. \"none\" — record source URL. actual URL string recorded (mode \"frontmatter\" \"file\") typically computed fetch function : https://github.com/{owner}/{repo}/blob/{resolved-ref}/{path}.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"defaults-defaults-","dir":"Reference","previous_headings":"","what":"Defaults (defaults)","title":"Access or write the bundled externals.json template — manifest_template","text":"fields optional; provide global defaults per-repo settings can override: include_prereleases (logical; default FALSE): TRUE, allow prereleases chosen resolving \"latest\". fallback_to_default_branch (logical; default TRUE): TRUE, use repo’s default branch release available ref = \"latest\".","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"example-manifest","dir":"Reference","previous_headings":"","what":"Example manifest","title":"Access or write the bundled externals.json template — manifest_template","text":"","code":"{   \"repos\": [     {       \"name\": \"ProjectA\",       \"repo\": \"example-org/project-a\",       \"ref\": \"latest\",       \"api_env\": \"PROJECTA_TOKEN\",       \"files\": [         { \"path\": \"docs/page.qmd\",  \"dest\": \"external/ProjectA/page.qmd\",  \"source_url\": \"frontmatter\" },         { \"path\": \"docs/notes.txt\", \"dest\": \"external/ProjectA/notes.txt\", \"source_url\": \"file\" },         { \"path\": \"static/logo.svg\",\"dest\": \"external/ProjectA/logo.svg\",  \"source_url\": \"none\" }       ]     },     {       \"name\": \"ProjectB\",       \"repo\": \"example-org/project-b\",       \"ref\": \"v1.0.0\",       \"files\": [         { \"path\": \"reports/summary.qmd\", \"dest\": \"external/ProjectB/summary.qmd\", \"source_url\": \"frontmatter\" }       ]     }   ],   \"defaults\": {     \"fallback_to_default_branch\": true,     \"include_prereleases\": false   } }"},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or write the bundled externals.json template — manifest_template","text":"","code":"if (FALSE) { # \\dontrun{ # Get the template as an R list (no file written): tpl <- manifest_template(NULL) str(tpl)  # Write the template into the project root: manifest_template(\"externals.json\")  # Write into a subfolder, creating it if needed: manifest_template(\"config/externals.json\")  # Overwrite an existing file: manifest_template(\"externals.json\", overwrite = TRUE) } # }"},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an externals manifest — manifest_validate","title":"Validate an externals manifest — manifest_validate","text":"Checks manifest (loaded JSON returned manifest_template()) conforms expected schema. Validation ensures required fields present, types correct, values within allowed sets.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an externals manifest — manifest_validate","text":"","code":"manifest_validate(manifest, error_on_false = TRUE)"},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an externals manifest — manifest_validate","text":"manifest Either: file path JSON manifest, list already parsed JSON (e.g., result jsonlite::fromJSON(..., simplifyVector = FALSE)). error_on_false Logical. TRUE (default): aggregate problems stop single error message listing problem line. FALSE: return character vector problems (character(0) valid).","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an externals manifest — manifest_validate","text":"Invisibly TRUE validation succeeds error_on_false = TRUE. character vector problems error_on_false = FALSE. Empty vector valid.","code":""},{"path":[]},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"required-structure","dir":"Reference","previous_headings":"","what":"Required structure","title":"Validate an externals manifest — manifest_validate","text":"Top-level object key \"repos\" (array repositories). Optional \"defaults\" object.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"repository-fields","dir":"Reference","previous_headings":"","what":"Repository fields","title":"Validate an externals manifest — manifest_validate","text":"repo (required, string): GitHub repository \"owner/name\" form. ref (optional, string): Git reference (tag, branch, SHA). Must single string provided. api_env (optional, string): Name environment variable token. Must single string provided. present set current R session, warning issued. files (required, array file objects).","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"file-fields","dir":"Reference","previous_headings":"","what":"File fields","title":"Validate an externals manifest — manifest_validate","text":"path (required, string): Path repo. dest (required, string): Destination path project. source_url (required, string): Must one : \"frontmatter\" \"file\" \"none\" See manifest_template() detailed description manifest schema.","code":""},{"path":"https://rkrug.github.io/fetchexternals/reference/manifest_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate an externals manifest — manifest_validate","text":"","code":"if (FALSE) { # \\dontrun{ # Validate a manifest file (stop with a single aggregated error if invalid) manifest_validate(\"externals.json\")  # Validate but collect all problems instead of stopping issues <- manifest_validate(\"externals.json\", error_on_false = FALSE) if (length(issues)) writeLines(issues) } # }"}]
