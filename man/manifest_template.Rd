% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manifest_template.R
\name{manifest_template}
\alias{manifest_template}
\title{Access or write the bundled \code{externals.json} template}
\usage{
manifest_template(dest, overwrite = FALSE)
}
\arguments{
\item{dest}{\code{NULL} or a character scalar file path.
\itemize{
\item \code{NULL}: return the parsed template as a list.
\item character path (e.g., \code{"externals.json"}): write the template to that path.
}}

\item{overwrite}{Logical. Overwrite \code{dest} if it already exists? Default \code{FALSE}.}
}
\value{
\itemize{
\item If \code{dest} is \code{NULL}: the template manifest as a list.
\item Otherwise (when writing): invisibly, the normalized destination path (character).
}
}
\description{
Returns or writes the package's template manifest located at
\code{inst/extdata/externals.json}.
\itemize{
\item If \code{dest} is \code{NULL}, the template JSON is read and returned
as an R list (no files are written).
\item If \code{dest} is a file path, the template is copied there (creating parent
directories as needed). Use \code{overwrite = TRUE} to replace an existing file.
\item If \code{dest} is missing, an error is raised.
}
}
\section{Manifest structure}{

The manifest is a JSON object with two top-level keys:
\itemize{
\item \strong{\code{"repos"}} (array of objects): required. Each entry configures one source repository.
\item \strong{\code{"defaults"}} (object): optional. Provides default behavior for all repos unless
overridden per-repo.
}
\subsection{Repositories (\code{repos[]})}{

Each repository entry supports the following fields:
\itemize{
\item \code{name} (string, optional): Human-readable identifier used only for organization.
\item \code{repo} (string, \strong{required}): GitHub repository in \code{"owner/name"} form,
e.g., \code{"example-org/project-a"}.
\item \code{ref} (string, optional; default: \code{"latest"}): The Git reference to fetch from.
Allowed values:
\itemize{
\item A tag (e.g., \code{"v1.2.3"}),
\item A branch name (e.g., \code{"main"}),
\item A commit SHA,
\item Or the string \code{"latest"} meaning “use the latest non-draft, non-prerelease
GitHub release tag”. If no release exists and fallback is enabled (see \code{defaults}),
the repository’s default branch is used.
}
\item \code{api_env} (string, optional): Name of the environment variable that holds the
GitHub API token to use \strong{for this repository} (e.g., \code{"PROJECTA_TOKEN"}). If omitted
or empty, your package’s token discovery (e.g., \code{GITHUB_TOKEN}) is used.
\item \code{include_prereleases} (logical, optional): If \code{TRUE} and \code{ref = "latest"}, allow
prereleases to be selected as the “latest”. Default inherited from \code{defaults},
otherwise \code{FALSE}.
\item \code{fallback_to_default_branch} (logical, optional): If \code{TRUE} and no release is found,
fall back to the repo’s default branch when \code{ref = "latest"}. Default inherited from
\code{defaults}, otherwise \code{TRUE}.
\item \code{files} (array of objects, \strong{required}): The files to fetch from this repo. Each item:
\itemize{
\item \code{path} (string, \strong{required}): Path inside the repo (e.g., \code{"docs/page.qmd"}).
\item \code{dest} (string, \strong{required}): Destination path in your project (e.g.,
\code{"external/ProjectA/page.qmd"}). Parent directories will be created.
\item \code{source_url} (string, \strong{required}): How to record the canonical source URL
for this file. Allowed values (exact strings):
\itemize{
\item \code{"frontmatter"} — Insert or update a \verb{source_url:} key \strong{only if} the file has a
\strong{well-formed YAML front matter} block (opening \verb{---} and a matching closing \verb{---}).
If no valid front matter is present, the file is left \strong{unchanged}.
\item \code{"file"} — Write the canonical URL to a sidecar file named \verb{<dest>.source}.
\item \code{"none"} — Do not record the source URL.
}
}

The actual URL string recorded (when mode is \code{"frontmatter"} or \code{"file"})
is typically computed by your fetch function as:
\verb{https://github.com/\{owner\}/\{repo\}/blob/\{resolved-ref\}/\{path\}}.
}
}

\subsection{Defaults (\code{defaults})}{

All fields here are optional; they provide global defaults that per-repo settings can override:
\itemize{
\item \code{include_prereleases} (logical; default \code{FALSE}): If \code{TRUE}, allow prereleases to be chosen
when resolving \code{"latest"}.
\item \code{fallback_to_default_branch} (logical; default \code{TRUE}): If \code{TRUE}, use the repo’s default
branch when no release is available and \code{ref = "latest"}.
}
}
}

\section{Example manifest}{


\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "repos": [
    \{
      "name": "ProjectA",
      "repo": "example-org/project-a",
      "ref": "latest",
      "api_env": "PROJECTA_TOKEN",
      "files": [
        \{ "path": "docs/page.qmd",  "dest": "external/ProjectA/page.qmd",  "source_url": "frontmatter" \},
        \{ "path": "docs/notes.txt", "dest": "external/ProjectA/notes.txt", "source_url": "file" \},
        \{ "path": "static/logo.svg","dest": "external/ProjectA/logo.svg",  "source_url": "none" \}
      ]
    \},
    \{
      "name": "ProjectB",
      "repo": "example-org/project-b",
      "ref": "v1.0.0",
      "files": [
        \{ "path": "reports/summary.qmd", "dest": "external/ProjectB/summary.qmd", "source_url": "frontmatter" \}
      ]
    \}
  ],
  "defaults": \{
    "fallback_to_default_branch": true,
    "include_prereleases": false
  \}
\}
}\if{html}{\out{</div>}}
}

\examples{
\dontrun{
# Get the template as an R list (no file written):
tpl <- manifest_template(NULL)
str(tpl)

# Write the template into the project root:
manifest_template("externals.json")

# Write into a subfolder, creating it if needed:
manifest_template("config/externals.json")

# Overwrite an existing file:
manifest_template("externals.json", overwrite = TRUE)
}

}
